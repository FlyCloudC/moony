// Generated using `moon info`, DON'T EDIT IT
package "FlyCloudC/moony"

import(
  "FlyCloudC/moony/enviroment"
  "moonbitlang/parser/basic"
  "moonbitlang/parser/syntax"
)

// Values
fn eval(@syntax.Expr, @enviroment.T[String, Value]) -> Value raise Cont

// Errors
pub suberror Cont {
  Raise(Value)
  Panic(@basic.Location, msg~ : String)
}
impl Show for Cont

// Types and methods
pub struct VM1 {
  global_env : @enviroment.T[String, Value]
}
fn VM1::eval(Self, @syntax.Expr) -> Value raise Cont
fn VM1::eval_top(Self, @syntax.Expr) -> Value raise Cont
fn VM1::new() -> Self

pub enum Value {
  Unit
  True
  False
  Char(Char)
  Int(Int)
  Double(Double)
  String(String)
  Tuple(Array[Value])
  Array(Array[Value])
  ArrayView(ArrayView[Value])
  Func(name~ : String?, arg_names~ : Array[String], body~ : @syntax.Expr, saved_env~ : @enviroment.T[String, Value])
  Enum(String, Array[Value])
  Struct(Map[String, Value])
}
fn Value::bool(Bool) -> Self
fn Value::op_as_view(Self, start? : Self, end? : Self) -> Self
fn Value::op_get(Self, Self) -> Self
fn Value::op_set(Self, Self, Self) -> Self
impl Add for Value
impl BitAnd for Value
impl BitOr for Value
impl BitXOr for Value
impl Compare for Value
impl Div for Value
impl Eq for Value
impl Mod for Value
impl Mul for Value
impl Shl for Value
impl Show for Value
impl Shr for Value
impl Sub for Value

// Type aliases

// Traits

